package com.pushtorefresh.storio.sample.db.entities;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.pushtorefresh.storio.sample.db.tables.CarsTable;
import com.pushtorefresh.storio.sqlite.StorIOSQLite;
import com.pushtorefresh.storio.sqlite.queries.Query;

import java.util.ArrayList;
import java.util.List;

import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import timber.log.Timber;

//@StorIOSQLiteType(table = PersonsTable.TABLE)
public class Person {

    // If object was not inserted into db, id will be null
    @Nullable
//    @StorIOSQLiteColumn(name = PersonsTable.COLUMN_ID, key = true)
    public Long id;

    @NonNull
//    @StorIOSQLiteColumn(name = PersonsTable.COLUMN_NAME)
    public String name;

    List<Car> cars = null;//new ArrayList<Car>();

    // leave default constructor for AutoGenerated code!
    Person() {}

    private Person(@Nullable Long id, @NonNull String name) {
        this.id = id;
        this.name = name;
    }

    @NonNull
    public static Person newPerson(@Nullable Long id, @NonNull String name) {
        return new Person(id, name);
    }

    @NonNull
    public static Person newPerson(@NonNull String name) {
        return new Person(null, name);
    }

    @Nullable
    public Long getId() {
        return id;
    }

    public void setId(@Nullable Long id) {
        this.id = id;
    }

    @NonNull
    public String getName() {
        return name;
    }

    public void setName(@NonNull String name) {
        this.name = name;
    }

//    @NonNull
//    public List<Car> getCars() { return cars; }

    @NonNull
    public List<Car> getCars(StorIOSQLite storIOSQLite) {
        if ( storIOSQLite != null && cars == null ) {
            cars = new ArrayList<>();

            final Subscription subscription = storIOSQLite
                    .get()
                    .listOfObjects(Car.class)
                    .withQuery(Query.builder()
                            .table(CarsTable.TABLE)
                            .where(CarsTable.COLUMN_ID_PERSON + "= ?")
                            .whereArgs(id)
                            .build())
                    .prepare()
                    .createObservable() // Get Result as rx.Observable and subscribe to further updates of tables from Query!
                    .observeOn(AndroidSchedulers.mainThread()) // All Rx operations work on Schedulers.io()
                    .subscribe(cars -> this.cars = cars, throwable -> Timber.e(throwable, "getCars()")
                    );
            subscription.unsubscribe();
        }

        return cars;
    }

    public void setCars(@NonNull List<Car> cars) {
        this.cars = cars;
    }
}
